/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.pragmasoft.eventaggregator.support.data;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IntegrationEventHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
          "{\"type\":\"record\",\"name\":\"IntegrationEventHeader\",\"namespace\":\"com.pragmasoft.eventaggregator\",\"fields\":[" +
                  "{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}," +
                  "{\"name\":\"correlationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}," +
                  "{\"name\":\"eventTs\",\"type\":\"long\"}]}"
        );
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String id;
  @Deprecated public String correlationId;
  @Deprecated public long eventTs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IntegrationEventHeader() {}

  /**
   * All-args constructor.
   */
  public IntegrationEventHeader(String id, String correlationId, Long eventTs) {
    this.id = id;
    this.correlationId = correlationId;
    this.eventTs = eventTs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return correlationId;
    case 2: return eventTs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (String)value$; break;
    case 1: correlationId = (String)value$; break;
    case 2: eventTs = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'correlationId' field.
   */
  public String getCorrelationId() {
    return correlationId;
  }

  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(String value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'eventTs' field.
   */
  public Long getEventTs() {
    return eventTs;
  }

  /**
   * Sets the value of the 'eventTs' field.
   * @param value the value to set.
   */
  public void setEventTs(Long value) {
    this.eventTs = value;
  }

  /** Creates a new IntegrationEventHeader RecordBuilder */
  public static IntegrationEventHeader.Builder newBuilder() {
    return new IntegrationEventHeader.Builder();
  }

  /** Creates a new IntegrationEventHeader RecordBuilder by copying an existing Builder */
  public static IntegrationEventHeader.Builder newBuilder(IntegrationEventHeader.Builder other) {
    return new IntegrationEventHeader.Builder(other);
  }

  /** Creates a new IntegrationEventHeader RecordBuilder by copying an existing IntegrationEventHeader instance */
  public static IntegrationEventHeader.Builder newBuilder(IntegrationEventHeader other) {
    return new IntegrationEventHeader.Builder(other);
  }

  /**
   * RecordBuilder for IntegrationEventHeader instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IntegrationEventHeader>
    implements org.apache.avro.data.RecordBuilder<IntegrationEventHeader> {

    private String id;
    private String correlationId;
    private long eventTs;

    /** Creates a new Builder */
    private Builder() {
      super(IntegrationEventHeader.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(IntegrationEventHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTs)) {
        this.eventTs = data().deepCopy(fields()[2].schema(), other.eventTs);
        fieldSetFlags()[2] = true;
      }
    }

    /** Creates a Builder by copying an existing IntegrationEventHeader instance */
    private Builder(IntegrationEventHeader other) {
            super(IntegrationEventHeader.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTs)) {
        this.eventTs = data().deepCopy(fields()[2].schema(), other.eventTs);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public String getEventId() {
      return id;
    }

    /** Sets the value of the 'id' field */
    public IntegrationEventHeader.Builder setEventId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'id' field has been set */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'id' field */
    public IntegrationEventHeader.Builder clearEventId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'correlationId' field */
    public String getRequestId() {
      return correlationId;
    }

    /** Sets the value of the 'correlationId' field */
    public IntegrationEventHeader.Builder setRequestId(String value) {
      validate(fields()[1], value);
      this.correlationId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'correlationId' field has been set */
    public boolean hasRequestId() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'correlationId' field */
    public IntegrationEventHeader.Builder clearRequestId() {
      correlationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'eventTs' field */
    public Long getOccurredOn() {
      return eventTs;
    }

    /** Sets the value of the 'eventTs' field */
    public IntegrationEventHeader.Builder setOccurredOn(long value) {
      validate(fields()[2], value);
      this.eventTs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'eventTs' field has been set */
    public boolean hasOccurredOn() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'eventTs' field */
    public IntegrationEventHeader.Builder clearOccurredOn() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public IntegrationEventHeader build() {
      try {
        IntegrationEventHeader record = new IntegrationEventHeader();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        record.correlationId = fieldSetFlags()[1] ? this.correlationId : (String) defaultValue(fields()[1]);
        record.eventTs = fieldSetFlags()[2] ? this.eventTs : (Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
